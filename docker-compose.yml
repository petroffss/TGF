version: '3.8'

services:
  # База данных PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: telegram_analysis_db
    environment:
      POSTGRES_DB: telegram_analysis
      POSTGRES_USER: telegram_user
      POSTGRES_PASSWORD: secure_password_123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=ru_RU.UTF-8 --lc-ctype=ru_RU.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - telegram_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telegram_user -d telegram_analysis"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis для кеширования и очередей
  redis:
    image: redis:7-alpine
    container_name: telegram_analysis_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - telegram_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: telegram_analysis_api
    environment:
      - DATABASE_URL=postgresql://telegram_user:secure_password_123@postgres:5432/telegram_analysis
      - REDIS_URL=redis://redis:6379
      - TELEGRAM_API_ID=${TELEGRAM_API_ID}
      - TELEGRAM_API_HASH=${TELEGRAM_API_HASH}
      - JWT_SECRET=${JWT_SECRET}
      - ENVIRONMENT=production
      - LOG_LEVEL=info
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - telegram_sessions:/app/sessions
    networks:
      - telegram_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Сервис сбора данных из Telegram
  collector:
    build:
      context: .
      dockerfile: Dockerfile.collector
    container_name: telegram_data_collector
    environment:
      - DATABASE_URL=postgresql://telegram_user:secure_password_123@postgres:5432/telegram_analysis
      - REDIS_URL=redis://redis:6379
      - TELEGRAM_API_ID=${TELEGRAM_API_ID}
      - TELEGRAM_API_HASH=${TELEGRAM_API_HASH}
      - ENVIRONMENT=production
      - COLLECTOR_BATCH_SIZE=100
      - COLLECTOR_RATE_LIMIT=1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - telegram_sessions:/app/sessions
    networks:
      - telegram_network
    restart: unless-stopped

  # Сервис анализа данных
  analyzer:
    build:
      context: .
      dockerfile: Dockerfile.analyzer
    container_name: telegram_analyzer
    environment:
      - DATABASE_URL=postgresql://telegram_user:secure_password_123@postgres:5432/telegram_analysis
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
      - ANALYSIS_WORKERS=4
      - SEMANTIC_MODEL=all-MiniLM-L6-v2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models  # Для ML моделей
    networks:
      - telegram_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Сервис мониторинга
  monitor:
    build:
      context: .
      dockerfile: Dockerfile.monitor
    container_name: telegram_monitor
    environment:
      - DATABASE_URL=postgresql://telegram_user:secure_password_123@postgres:5432/telegram_analysis
      - REDIS_URL=redis://redis:6379
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - ALERT_EMAIL=${ALERT_EMAIL}
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - telegram_network
    restart: unless-stopped

  # Frontend приложение
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: telegram_analysis_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=production
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - telegram_network
    restart: unless-stopped

  # Nginx для reverse proxy
  nginx:
    image: nginx:alpine
    container_name: telegram_analysis_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - api
      - frontend
    networks:
      - telegram_network
    restart: unless-stopped

  # Grafana для мониторинга
  grafana:
    image: grafana/grafana:latest
    container_name: telegram_analysis_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - telegram_network
    restart: unless-stopped

  # Prometheus для сбора метрик
  prometheus:
    image: prom/prometheus:latest
    container_name: telegram_analysis_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - telegram_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  telegram_sessions:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  telegram_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
